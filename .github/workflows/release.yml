name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
      
      - name: Install Rust Components
        run: |
          rustup component add rustfmt clippy
      
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-release-linux-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlite3-dev
      
      - name: Build Release
        run: |
          echo "ðŸ”¨ Building for Linux (x86_64)"
          cargo build --release
          echo "âœ… Build completed for Linux"
      
      - name: Verify Binary
        run: |
          echo "ðŸ“¦ Binary details for Linux:"
          ls -la target/release/
          echo ""
          echo "ðŸ“Š Binary size:"
          ls -lh target/release/plex-media-organizer
          echo ""
          echo "âœ… Binary verification passed for Linux"
      
      - name: Test Release Binary
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        run: |
          # Quick test of release binary
          ./target/release/plex-media-organizer --help
          ./target/release/plex-media-organizer setup --help
          echo "âœ… Release binary test passed for Linux"
      
      - name: Create Archive
        run: |
          echo "ðŸ“¦ Creating archive for Linux"
          tar -czf plex-media-organizer-v${{ github.ref_name }}-x86_64-unknown-linux-gnu.tar.gz -C target/release plex-media-organizer
          echo "âœ… Archive created: plex-media-organizer-v${{ github.ref_name }}-x86_64-unknown-linux-gnu.tar.gz"
      
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-binary
          path: plex-media-organizer-v${{ github.ref_name }}-x86_64-unknown-linux-gnu.tar.gz
          retention-days: 1

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
      
      - name: Install Rust Components
        run: |
          rustup component add rustfmt clippy
      
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-release-macos-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build Release
        run: |
          echo "ðŸ”¨ Building for macOS (x86_64)"
          cargo build --release
          echo "âœ… Build completed for macOS"
      
      - name: Verify Binary
        run: |
          echo "ðŸ“¦ Binary details for macOS:"
          ls -la target/release/
          echo ""
          echo "ðŸ“Š Binary size:"
          ls -lh target/release/plex-media-organizer
          echo ""
          echo "âœ… Binary verification passed for macOS"
      
      - name: Test Release Binary
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        run: |
          # Quick test of release binary
          ./target/release/plex-media-organizer --help
          ./target/release/plex-media-organizer setup --help
          echo "âœ… Release binary test passed for macOS"
      
      - name: Create Archive
        run: |
          echo "ðŸ“¦ Creating archive for macOS"
          tar -czf plex-media-organizer-v${{ github.ref_name }}-x86_64-apple-darwin.tar.gz -C target/release plex-media-organizer
          echo "âœ… Archive created: plex-media-organizer-v${{ github.ref_name }}-x86_64-apple-darwin.tar.gz"
      
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-binary
          path: plex-media-organizer-v${{ github.ref_name }}-x86_64-apple-darwin.tar.gz
          retention-days: 1

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
      
      - name: Install Rust Components
        run: |
          rustup component add rustfmt clippy
      
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-release-windows-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build Release
        run: |
          echo "ðŸ”¨ Building for Windows (x86_64)"
          cargo build --release
          echo "âœ… Build completed for Windows"
      
      - name: Verify Binary
        run: |
          echo "ðŸ“¦ Binary details for Windows:"
          Get-ChildItem target/release/
          echo ""
          echo "ðŸ“Š Binary size:"
          Get-ChildItem target/release/plex-media-organizer.exe | Select-Object Name, Length, @{Name="Size(MB)";Expression={[math]::Round($_.Length/1MB,2)}}
          echo ""
          echo "âœ… Binary verification passed for Windows"
      
      - name: Test Release Binary
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        run: |
          # Quick test of release binary
          .\target\release\plex-media-organizer.exe --help
          .\target\release\plex-media-organizer.exe setup --help
          echo "âœ… Release binary test passed for Windows"
      
      - name: Create Archive
        run: |
          echo "ðŸ“¦ Creating archive for Windows"
          Compress-Archive -Path target/release/plex-media-organizer.exe -DestinationPath plex-media-organizer-v${{ github.ref_name }}-x86_64-pc-windows-msvc.zip
          echo "âœ… Archive created: plex-media-organizer-v${{ github.ref_name }}-x86_64-pc-windows-msvc.zip"
      
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-binary
          path: plex-media-organizer-v${{ github.ref_name }}-x86_64-pc-windows-msvc.zip
          retention-days: 1

  create-release:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: List Artifacts
        run: |
          echo "ðŸ“¦ Downloaded artifacts:"
          find artifacts -type f -name "*.tar.gz" -o -name "*.zip"
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/linux-binary/plex-media-organizer-v${{ github.ref_name }}-x86_64-unknown-linux-gnu.tar.gz
            artifacts/macos-binary/plex-media-organizer-v${{ github.ref_name }}-x86_64-apple-darwin.tar.gz
            artifacts/windows-binary/plex-media-organizer-v${{ github.ref_name }}-x86_64-pc-windows-msvc.zip
            README.md
            CHANGELOG.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Release Summary
        run: |
          echo "ðŸŽ‰ Release created successfully!"
          echo "ðŸ“¦ Multi-platform binaries uploaded:"
          echo "   - Linux (x86_64): plex-media-organizer-v${{ github.ref_name }}-x86_64-unknown-linux-gnu.tar.gz"
          echo "   - macOS (x86_64): plex-media-organizer-v${{ github.ref_name }}-x86_64-apple-darwin.tar.gz"
          echo "   - Windows (x86_64): plex-media-organizer-v${{ github.ref_name }}-x86_64-pc-windows-msvc.zip"
          echo "ðŸ“š Documentation included"
          echo "ðŸš€ Ready for distribution"
