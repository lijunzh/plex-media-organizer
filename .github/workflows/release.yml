name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
      
      - name: Install Rust Components
        run: |
          rustup component add rustfmt clippy
      
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-release-linux-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libsqlite3-dev
      
      - name: Build Release
        run: |
          echo "üî® Building for Linux (x86_64)"
          cargo build --release
          echo "‚úÖ Build completed for Linux"
      
      - name: Verify Binary
        run: |
          echo "üì¶ Binary details for Linux:"
          ls -la target/release/
          echo ""
          echo "üìä Binary size:"
          ls -lh target/release/plex-media-organizer
          echo ""
          echo "‚úÖ Binary verification passed for Linux"
      
      - name: Test Release Binary
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        run: |
          # Quick test of release binary
          ./target/release/plex-media-organizer --help
          ./target/release/plex-media-organizer setup --help
          echo "‚úÖ Release binary test passed for Linux"
      
      - name: Create Archive
        run: |
          echo "üì¶ Creating archive for Linux"
          tar -czf plex-media-organizer-v${{ github.ref_name }}-x86_64-unknown-linux-gnu.tar.gz -C target/release plex-media-organizer
          echo "‚úÖ Archive created: plex-media-organizer-v${{ github.ref_name }}-x86_64-unknown-linux-gnu.tar.gz"
      
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-binary
          path: plex-media-organizer-v${{ github.ref_name }}-x86_64-unknown-linux-gnu.tar.gz
          retention-days: 1

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        target: [x86_64-apple-darwin, aarch64-apple-darwin]
        include:
          - target: x86_64-apple-darwin
            binary_name: plex-media-organizer
            archive_name: plex-media-organizer-v${{ github.ref_name }}-x86_64-apple-darwin.tar.gz
          - target: aarch64-apple-darwin
            binary_name: plex-media-organizer
            archive_name: plex-media-organizer-v${{ github.ref_name }}-aarch64-apple-darwin.tar.gz
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          target: ${{ matrix.target }}
      
      - name: Install Rust Components
        run: |
          rustup component add rustfmt clippy
      
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-release-macos-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build Release
        run: |
          echo "üî® Building for macOS (${{ matrix.target }})"
          cargo build --release --target ${{ matrix.target }}
          echo "‚úÖ Build completed for macOS (${{ matrix.target }})"
      
      - name: Verify Binary
        run: |
          echo "üì¶ Binary details for macOS (${{ matrix.target }}):"
          ls -la target/${{ matrix.target }}/release/
          echo ""
          echo "üìä Binary size:"
          ls -lh target/${{ matrix.target }}/release/${{ matrix.binary_name }}
          echo ""
          echo "‚úÖ Binary verification passed for macOS (${{ matrix.target }})"
      
      - name: Test Release Binary
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        run: |
          # Quick test of release binary
          ./target/${{ matrix.target }}/release/${{ matrix.binary_name }} --help
          ./target/${{ matrix.target }}/release/${{ matrix.binary_name }} setup --help
          echo "‚úÖ Release binary test passed for macOS (${{ matrix.target }})"
      
      - name: Create Archive
        run: |
          echo "üì¶ Creating archive for macOS (${{ matrix.target }})"
          tar -czf ${{ matrix.archive_name }} -C target/${{ matrix.target }}/release ${{ matrix.binary_name }}
          echo "‚úÖ Archive created: ${{ matrix.archive_name }}"
      
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-${{ matrix.target }}-binary
          path: ${{ matrix.archive_name }}
          retention-days: 1

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
      
      - name: Install Rust Components
        run: |
          rustup component add rustfmt clippy
      
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-release-windows-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build Release
        run: |
          echo "üî® Building for Windows (x86_64)"
          cargo build --release
          echo "‚úÖ Build completed for Windows"
      
      - name: Verify Binary
        run: |
          echo "üì¶ Binary details for Windows:"
          Get-ChildItem target/release/
          echo ""
          echo "üìä Binary size:"
          Get-ChildItem target/release/plex-media-organizer.exe | Select-Object Name, Length, @{Name="Size(MB)";Expression={[math]::Round($_.Length/1MB,2)}}
          echo ""
          echo "‚úÖ Binary verification passed for Windows"
      
      - name: Test Release Binary
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}
        run: |
          # Quick test of release binary
          .\target\release\plex-media-organizer.exe --help
          .\target\release\plex-media-organizer.exe setup --help
          echo "‚úÖ Release binary test passed for Windows"
      
      - name: Create Archive
        run: |
          echo "üì¶ Creating archive for Windows"
          Compress-Archive -Path target/release/plex-media-organizer.exe -DestinationPath plex-media-organizer-v${{ github.ref_name }}-x86_64-pc-windows-msvc.zip
          echo "‚úÖ Archive created: plex-media-organizer-v${{ github.ref_name }}-x86_64-pc-windows-msvc.zip"
      
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-binary
          path: plex-media-organizer-v${{ github.ref_name }}-x86_64-pc-windows-msvc.zip
          retention-days: 1

  create-release:
    needs: [build-linux, build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: List Artifacts
        run: |
          echo "üì¶ Downloaded artifacts:"
          find artifacts -type f -name "*.tar.gz" -o -name "*.zip"
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/linux-binary/plex-media-organizer-v${{ github.ref_name }}-x86_64-unknown-linux-gnu.tar.gz
            artifacts/macos-x86_64-apple-darwin-binary/plex-media-organizer-v${{ github.ref_name }}-x86_64-apple-darwin.tar.gz
            artifacts/macos-aarch64-apple-darwin-binary/plex-media-organizer-v${{ github.ref_name }}-aarch64-apple-darwin.tar.gz
            artifacts/windows-binary/plex-media-organizer-v${{ github.ref_name }}-x86_64-pc-windows-msvc.zip
            README.md
            CHANGELOG.md
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Release Summary
        run: |
          echo "üéâ Release created successfully!"
          echo "üì¶ Multi-platform binaries uploaded:"
          echo "   - Linux (x86_64): plex-media-organizer-v${{ github.ref_name }}-x86_64-unknown-linux-gnu.tar.gz"
          echo "   - macOS (x86_64): plex-media-organizer-v${{ github.ref_name }}-x86_64-apple-darwin.tar.gz"
          echo "   - macOS (Apple Silicon): plex-media-organizer-v${{ github.ref_name }}-aarch64-apple-darwin.tar.gz"
          echo "   - Windows (x86_64): plex-media-organizer-v${{ github.ref_name }}-x86_64-pc-windows-msvc.zip"
          echo "üìö Documentation included"
          echo "üöÄ Ready for distribution"

  publish-crates-io:
    needs: [create-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
      
      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-publish-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Verify Package
        run: |
          echo "üîç Verifying package for crates.io..."
          cargo check --release
          cargo test --release
          cargo package --allow-dirty
          echo "‚úÖ Package verification passed"
      
      - name: Publish to crates.io
        run: |
          echo "üì¶ Publishing to crates.io..."
          cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
          echo "‚úÖ Published to crates.io successfully!"
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      
      - name: Crates.io Summary
        run: |
          echo "üéâ Crates.io publication successful!"
          echo "üì¶ Package: plex-media-organizer"
          echo "üè∑Ô∏è  Version: ${{ github.ref_name }}"
          echo "üîó URL: https://crates.io/crates/plex-media-organizer"

  publish-homebrew:
    needs: [create-release]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.0'
          bundler-cache: true
      
      - name: Checkout Homebrew Tap
        uses: actions/checkout@v4
        with:
          repository: lijunzh/homebrew-plex-media-organizer
          path: homebrew-tap
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Calculate SHA256 Checksums
        run: |
          echo "üîç Calculating SHA256 checksums for Homebrew formula..."
          
          # Download and calculate checksums
          curl -L "https://github.com/lijunzh/plex-media-organizer/releases/download/${{ github.ref_name }}/plex-media-organizer-v${{ github.ref_name }}-aarch64-apple-darwin.tar.gz" -o aarch64.tar.gz
          curl -L "https://github.com/lijunzh/plex-media-organizer/releases/download/${{ github.ref_name }}/plex-media-organizer-v${{ github.ref_name }}-x86_64-apple-darwin.tar.gz" -o x86_64.tar.gz
          curl -L "https://github.com/lijunzh/plex-media-organizer/releases/download/${{ github.ref_name }}/plex-media-organizer-v${{ github.ref_name }}-x86_64-unknown-linux-gnu.tar.gz" -o linux.tar.gz
          
          AARCH64_SHA256=$(shasum -a 256 aarch64.tar.gz | cut -d' ' -f1)
          X86_64_SHA256=$(shasum -a 256 x86_64.tar.gz | cut -d' ' -f1)
          LINUX_SHA256=$(shasum -a 256 linux.tar.gz | cut -d' ' -f1)
          
          echo "AARCH64_SHA256=$AARCH64_SHA256" >> $GITHUB_ENV
          echo "X86_64_SHA256=$X86_64_SHA256" >> $GITHUB_ENV
          echo "LINUX_SHA256=$LINUX_SHA256" >> $GITHUB_ENV
          
          echo "‚úÖ SHA256 checksums calculated:"
          echo "   aarch64: $AARCH64_SHA256"
          echo "   x86_64: $X86_64_SHA256"
          echo "   linux: $LINUX_SHA256"
      
      - name: Update Homebrew Formula
        run: |
          echo "üìù Updating Homebrew formula..."
          
          # Extract version number (remove 'v' prefix)
          VERSION=${GITHUB_REF_NAME#v}
          
          # Update the formula file
          cat > homebrew-tap/Formula/plex-media-organizer.rb << EOF
          class PlexMediaOrganizer < Formula
            desc "Intelligent media file organizer following Plex naming conventions"
            homepage "https://github.com/lijunzh/plex-media-organizer"
            version "$VERSION"
            license "MIT"

            on_macos do
              if Hardware::CPU.arm?
                url "https://github.com/lijunzh/plex-media-organizer/releases/download/${{ github.ref_name }}/plex-media-organizer-v${{ github.ref_name }}-aarch64-apple-darwin.tar.gz"
                sha256 "$AARCH64_SHA256"
              else
                url "https://github.com/lijunzh/plex-media-organizer/releases/download/${{ github.ref_name }}/plex-media-organizer-v${{ github.ref_name }}-x86_64-apple-darwin.tar.gz"
                sha256 "$X86_64_SHA256"
              end
            end

            on_linux do
              url "https://github.com/lijunzh/plex-media-organizer/releases/download/${{ github.ref_name }}/plex-media-organizer-v${{ github.ref_name }}-x86_64-unknown-linux-gnu.tar.gz"
              sha256 "$LINUX_SHA256"
            end

            def install
              bin.install "plex-media-organizer"
            end

            test do
              system "#{bin}/plex-media-organizer", "--version"
            end
          end
          EOF
          
          echo "‚úÖ Homebrew formula updated"
      
      - name: Commit and Push Homebrew Tap
        run: |
          echo "üöÄ Committing and pushing Homebrew tap updates..."
          
          cd homebrew-tap
          
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          git add Formula/plex-media-organizer.rb
          git commit -m "feat: update plex-media-organizer to ${{ github.ref_name }}"
          git push
          
          echo "‚úÖ Homebrew tap updated successfully!"
      
      - name: Homebrew Summary
        run: |
          echo "üéâ Homebrew publication successful!"
          echo "üì¶ Formula: plex-media-organizer"
          echo "üè∑Ô∏è  Version: ${{ github.ref_name }}"
          echo "üîó Tap: https://github.com/lijunzh/homebrew-plex-media-organizer"
          echo "üì• Install: brew install lijunzh/plex-media-organizer/plex-media-organizer"
